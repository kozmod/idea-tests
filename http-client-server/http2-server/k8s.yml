#Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-http2-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-http2-server
      version: v1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "true" #istio - inject proxy
      labels:
        app: go-http2-server
        version: v1
    spec:
      containers:
        - image: go-http2-server:v1.0.7
          name: go-http2-server
          ports:
            - containerPort: 8080
---
# service
apiVersion: v1
kind: Service
metadata:
  name: go-http2-server
  labels:
    app: go-http2-server
spec:
  type: LoadBalancer
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: go-http2-server
---
#Pod
apiVersion: v1
kind: Pod
metadata:
  name: http2-server
  labels:
    app: go-http2-server
spec:
  containers:
    - image: go-http2-server:v1.0.0
      name: go-http2-server
      ports:
        - containerPort: 8080
---
#
# VirtualService & Gateway to test Istio ingress gateway from local machine
# https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/
#
# export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
# export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
# export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')
#
# minikube
# export INGRESS_HOST=$(minikube ip)
#
# Usage:
#   kubectl apply -f - <<EOF
#   <manifest>
#   EOF
#
#
#   curl -s -v -i "Accept: application/json" -HHost:xxx.com "http://$INGRESS_HOST:$INGRESS_PORT/hp"

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: go-http2-server
spec:
  hosts:
    - "xxx.com"
  gateways:
    - go-server-gateway
  http:
    - match:
        - uri:
            prefix: /t
        - uri:
            prefix: /tp
        - uri:
            prefix: /hp
      route:
        - destination:
            port:
              number: 80
            host: go-http2-server
EOF
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: go-server-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "xxx.com"
EOF