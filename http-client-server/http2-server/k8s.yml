#Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-http2-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: go-http2-server
      version: v1
  minReadySeconds: 15
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      annotations:
        sidecar.istio.io/inject: "false" #istio - inject proxy
      labels:
        app: go-http2-server
        version: v1
    spec:
      containers:
        - image: go-http2-server:v1.0.15 #registry.sigma.sbrf.ru/dev/ci01994970/ci02001129_synapse_dev/kozmo/go-http2-server:latest
          name: go-http2-server
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config-volume
              mountPath: app/etc/config
          resources:
            limits:
              cpu: "0.3"
              memory: 100Mi
            requests:
              cpu: "0.1"
              memory: 10Mi
      volumes:
        - name: config-volume
          configMap:
            # Provide the name of the ConfigMap containing the files you want
            # to add to the container
            name: go-http2-server-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: go-http2-server-config
  namespace: default
data:
  config.yml: |
    serverAddr:
      port: 8080
    log:
      filePath: http2server.log
      mod:
        - stdout
---
# service
apiVersion: v1
kind: Service
metadata:
  name: go-http2-server
  labels:
    app: go-http2-server
spec:
  type: LoadBalancer
  ports:
    - port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    app: go-http2-server
---
#
# VirtualService & Gateway to test Istio ingress gateway from local machine
# https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/
#
# export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}')
# export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="https")].nodePort}')
# export TCP_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="tcp")].nodePort}')
#
# minikube
# export INGRESS_HOST=$(minikube ip)
#
# Usage:
#   kubectl apply -f - <<EOF
#   <manifest>
#   EOF
#
#
#   curl -s -v -i "Accept: application/json" -HHost:xxx.com "http://$INGRESS_HOST:$INGRESS_PORT/hp"

apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: go-http2-server
spec:
  hosts:
    - "xxx.com"
  gateways:
    - go-server-gateway
  http:
    - match:
        - uri:
            prefix: /t
        - uri:
            prefix: /tp
        - uri:
            prefix: /hp
      route:
        - destination:
            port:
              number: 80
            host: go-http2-server
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: go-server-gateway
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "xxx.com"
---
#OS
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: ingress
  namespace: istio-system
  labels:
    app: istio-ingressgateway
    istio: ingressgateway
    release: istio
  annotations:
    openshift.io/host.generated: 'true'
spec:
  host: ingress-istio-system.apps.syn-sb.sigma.sbrf.ru
  to:
    kind: Service
    name: istio-ingressgateway
    weight: 100
  port:
    targetPort: gw
  wildcardPolicy: None
status:
  ingress:
    - host: ingress-istio-system.apps.syn-sb.sigma.sbrf.ru
      routerName: default
      conditions:
        - type: Admitted
          status: 'True'
          lastTransitionTime: '2020-09-11T11:35:15Z'
      wildcardPolicy: None
      routerCanonicalHostname: apps.syn-sb.sigma.sbrf.ru
___

#ingress-gateway
#...
#- name: gw
#  protocol: TCP
#  port: 3080
#  targetPort: 3080
#  nodePort: 31230
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: go-http2-server
  namespace: default
spec:
  gateways:
    - go-server-gateway
  hosts:
    - ingress-istio-system.apps.syn-sb.sigma.sbrf.ru
  http:
    - match:
        - uri:
            prefix: /t
        - uri:
            prefix: /tp
        - uri:
            prefix: /hp
      route:
        - destination:
            host: go-http2-server
            port:
              number: 1080
---
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: ingressgateway-test
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - hosts:
        - ingress-rout-istio-system.apps.syn-sb.sigma.sbrf.ru #rout
      port:
        name: http
        number: 3080
        protocol: HTTP